// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Error represents a row from 'public.errors'.
type Error struct {
	ID      int       `json:"id"`      // id
	Email   string    `json:"email"`   // email
	Created time.Time `json:"created"` // created
	Error   string    `json:"error"`   // error

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Error exists in the database.
func (e *Error) Exists() bool {
	return e._exists
}

// Deleted provides information if the Error has been deleted from the database.
func (e *Error) Deleted() bool {
	return e._deleted
}

// Insert inserts the Error to the database.
func (e *Error) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.errors (` +
		`email, created, error` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, e.Email, e.Created, e.Error)
	err = db.QueryRow(sqlstr, e.Email, e.Created, e.Error).Scan(&e.ID)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Error in the database.
func (e *Error) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.errors SET (` +
		`email, created, error` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, e.Email, e.Created, e.Error, e.ID)
	_, err = db.Exec(sqlstr, e.Email, e.Created, e.Error, e.ID)
	return err
}

// Save saves the Error to the database.
func (e *Error) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Error.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Error) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.errors (` +
		`id, email, created, error` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, email, created, error` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.email, EXCLUDED.created, EXCLUDED.error` +
		`)`

	// run query
	XOLog(sqlstr, e.ID, e.Email, e.Created, e.Error)
	_, err = db.Exec(sqlstr, e.ID, e.Email, e.Created, e.Error)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Error from the database.
func (e *Error) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.errors WHERE id = $1`

	// run query
	XOLog(sqlstr, e.ID)
	_, err = db.Exec(sqlstr, e.ID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// ErrorByID retrieves a row from 'public.errors' as a Error.
//
// Generated from index 'errors_pkey'.
func ErrorByID(db XODB, id int) (*Error, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, created, error ` +
		`FROM public.errors ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	e := Error{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&e.ID, &e.Email, &e.Created, &e.Error)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
