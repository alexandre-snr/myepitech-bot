// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Registration represents a row from 'public.registrations'.
type Registration struct {
	ID        int    `json:"id"`        // id
	Email     string `json:"email"`     // email
	Password  string `json:"password"`  // password
	Twofactor string `json:"twofactor"` // twofactor

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Registration exists in the database.
func (r *Registration) Exists() bool {
	return r._exists
}

// Deleted provides information if the Registration has been deleted from the database.
func (r *Registration) Deleted() bool {
	return r._deleted
}

// Insert inserts the Registration to the database.
func (r *Registration) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.registrations (` +
		`email, password, twofactor` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, r.Email, r.Password, r.Twofactor)
	err = db.QueryRow(sqlstr, r.Email, r.Password, r.Twofactor).Scan(&r.ID)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Registration in the database.
func (r *Registration) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.registrations SET (` +
		`email, password, twofactor` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, r.Email, r.Password, r.Twofactor, r.ID)
	_, err = db.Exec(sqlstr, r.Email, r.Password, r.Twofactor, r.ID)
	return err
}

// Save saves the Registration to the database.
func (r *Registration) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Registration.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Registration) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.registrations (` +
		`id, email, password, twofactor` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, email, password, twofactor` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.email, EXCLUDED.password, EXCLUDED.twofactor` +
		`)`

	// run query
	XOLog(sqlstr, r.ID, r.Email, r.Password, r.Twofactor)
	_, err = db.Exec(sqlstr, r.ID, r.Email, r.Password, r.Twofactor)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Registration from the database.
func (r *Registration) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.registrations WHERE id = $1`

	// run query
	XOLog(sqlstr, r.ID)
	_, err = db.Exec(sqlstr, r.ID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RegistrationByEmail retrieves a row from 'public.registrations' as a Registration.
//
// Generated from index 'registrations_email_key'.
func RegistrationByEmail(db XODB, email string) (*Registration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, password, twofactor ` +
		`FROM public.registrations ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	r := Registration{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&r.ID, &r.Email, &r.Password, &r.Twofactor)
	if err != nil {
		return nil, err
	}

	return &r, nil
}

// RegistrationByID retrieves a row from 'public.registrations' as a Registration.
//
// Generated from index 'registrations_pkey'.
func RegistrationByID(db XODB, id int) (*Registration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, password, twofactor ` +
		`FROM public.registrations ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	r := Registration{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&r.ID, &r.Email, &r.Password, &r.Twofactor)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
